URL에 접속해서 index.html이 출력되기까지의 과정


1. 기본적으로 URL에 접속하면, polls/urls.py 파일로 연결된다.
urls.py 에서는 해당 URL로 들어오는 모든 주소 요청을 정규표현식을 이용하여 처리하는데,
URL뒤에 아무런 텍스트도 없을시에 views.IndexView.as_view()를 호출한다.
URL 자체로 접속했다고 가정하고 상황을 이어나가 보자.


2. URL자체로 접속했을경우, polls/views.py 내에 있는 IndexView 클래스를 호출하게 되는데,
이러한 형태는 '클래스 형 뷰 ' 라 하여, 하나의 뷰 파일을 여러개의 클래스로 나눈 다음,
클래스형 뷰의 진입 메소드인as_view() 메소드를 호출하면
view.클래스명.as_view() 의 형태로 여러개의 뷰를 볼 수 있게 해준다.
# 클래스형 뷰에 대한 자세한 설명 : http://ruaa.me/django-view/
클래스 형 뷰를 사용하면 if문에 의한 구문 구조를 사용하지 않고, 클래스 이름을 통해 다중 뷰를 제공 할 수 있다.


3. 장고에서 기본 제공하는 제네릭 뷰를 임포트하여 사용하면, (코드 내에서 from django.views import generic 로 표현된다. )
template_name = 'polls/index.html' 과 같은 형태로 파일 이름을 지정하여
템플릿 폴더에서 원하는 html파일을 가져와 뷰로 보여 줄 수 있다.
context_object_name 는 해당 템플릿에 전달될 오브젝트의 이름을 정의한다.
ontext_object_name = 'latest_question_list' 라고 작성했다면,
index.html 에 latest_question_list라는 이름으로 오브젝트를 전달하는것을 의미한다.


4. 이제부터는 장고 DB로 넘어간다. polls/view.py -> IndexView 의 get_queryset 함수를 보자.
 Question.objects.filter 라는 구문이 나오는데, 이는 데이터베이스에서 사용하는 구문과 동일하다.
 터미널을 열고, manage.py가 있는 디렉토리에서
 >python manage.py shell 을 입력하면 파이썬 쉘로 진입한다.

 * 데이터베이스는 이미 설정이 완료되어 설치가 되어있는 상태

 쉘에서 from polls.models import Question, Choice 를 입력하면,
 polls/modes.py를 참조하여 Question 과 Choice 클래스를 임포트하여 테이블로 사용하게 된다.
 models.py에는 Question 클래스와 Choice 클래스 두가지가 있는데,
 Question 클래스에서 question_text 라는 데이터는 글자수 200자 제한을 가지며,
 Choice 클래스에서 question라는 데이터는 외래키로 Question 클래스의 데이터를 가져온다.
 즉, Question 과 Choice 는 테이블이라고 봐도 무방한 구조를 가지고 있다.
 models.py는 데이터베이스의 테이블 구조를 정의하는 파일인 셈이다.

 Question.objects.all() 명령어를 이용해 현재까지 Question테이블에 만들어져 있는 모든 데이터의 목록을 볼 수 있다.

 *objects 속성은 django.db 에 정의되어있는 모델 매니저를 임포트해서 사용하는 모양이다.

 view.py 에서는 Question.objects 의 형태로 DB에 있는 Question테이블을 참조하여 index.html로 보내주는데,
 이때 order_by와 같이 sql질의어를 활용하는것이 가능해보인다. 생성 시간순으로 5개를 참조하여
 index.html 에 latest_question_list라는 이름으로 오브젝트를 전달한다.

5. 이제 index.html을 보자.

if문에서 latest_question_list 가 존재하는지를 우선적으로 확인 한 후,
반복문으로 진입하여 question이라는 이름으로 오브젝트를 명시하여 사용하게 되는데,
question.question_text 의 형태로 우리가 models.py에서 정의하고 shell에서 추가했던 데이터를 끌어와서 사용 할 수 있다.

*php의 경우는 db를 사용하려면 php 문서 내에서 sql에 로그인 한 다음 질의어를 보내주는 등의 복잡한 과정을 거쳐야 사용이 가능하지만
장고는 매우 간단하게 사용이 가능한게 좋은것 같다.
그리고 쿼리문을 직접 보내는 방식이 아니기에, sql 인젝션과 같은 공격을 애초부터 차단이 가능하여
보안성도 php에 비하면 뛰어나다고 볼 수 있다.

결국 최종적으로 index.html에서 보여주는 결과는
db의 Question 테이블의 id 와 question_text 인데, 이를 링크 형태로 사용하여 detail.html페이지와 연결해준다.

지금까지의 경로를 정리하면

URL에 접속 -> mysite/urls.py로 연결 -> mysite.urls 에서는 polls/urls.py를 인클루드하여 사용 ->
polls.urls 에선 URL 접속 요청이 들어오면 polls/template/polls/index.html 로 연결해줌 ->
index.html에서는 DB에 정의되어있는 Question테이블의 데이터를 불러와서 사용

까지가 URL을 입력하여 장고웹 페이지에 접속했을때 index.html 페이지가 호출되는 과정이다.
